name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  cache:
    runs-on: ubuntu-latest
    outputs:
      npm-cache-hit: ${{ steps.npm-cache.outputs.cache-hit }}
      pw-cache-hit: ${{ steps.pw-cache.outputs.cache-hit }}
      next-cache-hit: ${{ steps.next-cache.outputs.cache-hit }}
    steps:
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - uses: actions/cache@v3
        id: pw-cache
        with:
          path: ~/.cache/ms-playwright
          key: pw-${{ hashFiles('package-lock.json') }}

      - uses: actions/cache@v3
        id: next-cache
        with:
          path: .next/cache
          key: next-${{ hashFiles('package-lock.json') }}

  lint:
    needs: [cache]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci
      - run: npm run lint

  security:
    needs: [cache]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - run: npm install --save-dev eslint-plugin-security
      - name: Run ESLint with security rules
        run: npx eslint --ext .js,.jsx,.ts,.tsx --plugin security

  test-unit:
    needs: [cache, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci
      - run: npm run test:unit

  test-e2e:
    needs: [cache, lint]
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci
      - run: npx playwright install --with-deps

      - name: Run E2E tests and capture output
        run: npx playwright test --reporter=github | tee e2e-summary.txt
        env:
          BASE_URL: ${{ vars.BASE_URL }}

      - name: Add E2E summary to GHA output
        if: always()
        run: |
          echo '## Playwright E2E Test Summary' >> $GITHUB_STEP_SUMMARY
          tail -n 50 e2e-summary.txt >> $GITHUB_STEP_SUMMARY

  build:
    needs: [ test-unit, test-e2e ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci

      - run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: Prepare deploy artifact
        run: |
          echo "Creating a fresh deploy folder"
          mkdir -p deploy

          echo "Coping standalone runtime files into deploy"
          rsync -av .next/standalone/ deploy/

          echo "Creating a deploy/.next folder and coping build assets from .next (exclude standalone and cache)"
          mkdir -p deploy/.next
          rsync -av --exclude='standalone' --exclude='cache' .next/ deploy/.next/

          echo "Creating a deploy/public folder and coping build assets from public folder."
          if [ -d "public" ]; then
            mkdir -p deploy/public
            rsync -av public/ deploy/public/
          fi

          echo "Final deploy folder structure:"
          ls -laR deploy

      - name: Upload deploy artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy-build
          path: deploy
          if-no-files-found: error
